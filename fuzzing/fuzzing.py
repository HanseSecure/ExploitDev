#!/usr/bin/python
'''
Content:	exploitDev fuzzing Helper: Takes a fuzz.spk file from my netstream2spike.py, divided this into seperated files for each request and starts fuzzing with spike
Author: 	Florian Hansemann | @HanseSecure | https://hansesecure.de
Date: 		03/2018

Usage:		python fuzzing.py -f <fuzz.spk> -c <auth_request> -p <target_port> <target_IP>

ToDos:      listening support, udp support, checking on other services, strg+c handler, code review

'''
import optparse, os, subprocess, sys

z = 1


def start(fuzz_input,auth_request,target_port):
    global z
    # If auth request file is given, add this to each .spk file
    if auth_request != None:
        file = open('auth.tmp', 'w')
        with open(auth_request) as f:
            for line in f:
                stage_1 = line.replace(' ', ' \ns_string("')
                stage_2 = ''.join(('s_string("', stage_1, ''))
                file.write("//Auth request: \n" + stage_2.replace('\n', '");\n'))
                file.write('s_string("\\r\\n");\n')
                file.write('s_readline();\n')
        file.close()

    create_tmp(fuzz_input,auth_request)
    fuzzing(target_port)

# run spike on each .spk file and save the current config name to last_spk
def fuzzing(target_port):
    global z
    i = 1
    target_ip = sys.argv[-1]
    while i < z:
        print("[+] Reading fuzz_" + str(z - i) + ".spk 0 0 [+]")
        last_file = open('last_spk', 'w')
        last_file.write("Last spike config file wich was read in:\nfuzz_" + str(z - i) + ".spk\n")
        last_file.close()
        subprocess.call(["generic_send_tcp " + target_ip + " " + target_port + " fuzz_" + str(z - i) + ".spk 0 0"],
                        shell=True)
        i = i + 1

# create a single .spike file for each request in fuzz.spk from netstream2spike.py and add auth if given
def create_tmp(fuzz_input,auth_request):
    global z
    if auth_request != None:
        print("[+] Reading fuzz.spk [+]")
        fuzz_file = open(fuzz_input, 'r+')

        for line in fuzz_file:
            if '//New requestLine:' in line:
                file_tmp = open("fuzz_" + str(z) + ".spk", 'w')
                auth_file = open('auth.tmp', 'r+')
                for auth in auth_file:
                    file_tmp.write(auth)
                z = z + 1

            else:
                file_tmp.write(line)
    else:
        print("[+] Reading fuzz.spk [+]")
        fuzz_file = open(fuzz_input, 'r+')

        for line in fuzz_file:
            if '//New requestLine:' in line:
                file_tmp = open("fuzz_" + str(z) + ".spk", 'w')
                z = z + 1

            else:
                file_tmp.write(line)


#	Main Methode
def main():
    parser = optparse.OptionParser('fuzzing.py -f <fuzz.spk> -a <auth_request> -p <target_port> <target>')
    parser.add_option('-f', dest='fuzz_input', type='string', help='specify fuzz.spk')
    parser.add_option('-a', dest='auth_request', type='string', help='specify auth_request')
    parser.add_option('-p', dest='target_port', type='string', help='specify target_port')
    (options, args) = parser.parse_args()
    fuzz_input = options.fuzz_input
    auth_request = options.auth_request
    target_port = options.target_port
    if fuzz_input == None:
        print parser.usage
        exit(0)
    if os.path.isfile(fuzz_input) == False:
        print("File does not exists")
    while True:
        try:
            start(fuzz_input, auth_request, target_port)
        except KeyboardInterrupt:
            print("You pressed Ctrl+C!, hopefully your application crashed ;-)\n")
            last_file = open('last_spk', 'r')
            print(last_file.read())
            sys.exit()


if __name__ == '__main__':
    main()